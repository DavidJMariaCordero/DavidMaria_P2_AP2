@page "/R_Cobros"
@inject IToastService toastService

<EditForm Model="Cobro" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header">
        <h3>Registro de Cobros</h3>
    </div>

    <div class="card-body">
        <form>

            <div class="form-group">
                <label>Id</label>
                <div class="input-group">
                    <InputNumber @bind-Value="CobroId" class="form-control " />
                    <div class="input-group-append">
                        <button type="button" class="btn btn-warning" @onclick="Buscar">
                            <i class="oi oi-magnifying-glass mr-1" />Buscar
                        </button>
                    </div>
                    <div class="input-group-append">
                        <label>Fecha</label>
                        <div class="input-group-append">
                            <InputDate @bind-Value="Cobro.Fecha" class="form-control" />
                        </div>
                        <div><ValidationMessage For="@(() => Cobro.Fecha)" /></div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label>Cliente</label>
                <div class="input-group">
                    <InputSelect class="form-control" @bind-Value="Cobro.ClienteId" @onclick="(()=> BuscarVentas(Cobro.ClienteId))">
                        @foreach (var cliente in ListaClientes)
                        {
                            <option value="@cliente.ClienteId">@cliente.Nombres</option>
                        }
                    </InputSelect>
                </div>
                <div><ValidationMessage For="@(() => Cobro.ClienteId)" /></div>
            </div>

            <div class="card" style=" border-width: 3px">
                <label>Facturas Pendientes</label>
                <div class="card-body">

                    <div>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Fecha</th>
                                    <th>Monto</th>
                                    <th>Balance</th>
                                    <th>Cobrado</th>
                                    <th>Pagar</th>
                                </tr>
                            </thead>

                            <tbody class="text-dark">
                                @foreach (var cobro in Cobro.Detalle)
                                 {
                                    <tr>
                                        <td>@cobro.Id</td>
                                        <td>@cobro.Fecha</td>
                                        <td>@cobro.Monto</td>
                                        <td>@cobro.Balance</td>
                                        <td>@cobro.Cobrado</td>


                                        <td>                           
                                           <input class="form-check-input" type="checkbox" @onchange="eventArgs => {Pago(Convert.ToBoolean(eventArgs.Value), cobro.VentaId); }" >
                                        </td>
                                    </tr>
                                 }
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>

        </form>

        <div>
            <label class="text-dark font-weight-bolder">Totales: </label>
            <label class="text-dark font-weight-bolder"> 500 </label>
        </div>
        <div>
            <label>Observaciones</label>
            <InputTextArea class="form-control" @bind-Value="Cobro.Observaciones"></InputTextArea>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>

                <button type="button" class="btn btn-lg btn-primary" @onclick="Limpiar">
                    <i class="oi oi-document mr-2" />Nuevo
                </button>

                <button type="submit" class="btn btn-lg btn-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-save2" viewBox="0 0 16 16">
                        <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v4.5h2a.5.5 0 0 1 .354.854l-2.5 2.5a.5.5 0 0 1-.708 0l-2.5-2.5A.5.5 0 0 1 5.5 6.5h2V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z" />
                    </svg>Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                    <i class="oi oi-trash mr-2"></i>Eliminar
                </button>

            </div>
        </div>

    </div>

</EditForm>

@code {
    private int CobroId { get; set; }
    private Cobros Cobro { get; set; } = new Cobros();
    public List<Clientes> ListaClientes { get; set; } = ClientesBLL.GetList(c => true);
    public List<Ventas> ListaVentas { get; set; }
    public List<CobrosDetalle> Detalle { get; set; }

    private void Buscar()
    {
        if (Cobro.CobroId > 0)
        {
            var encontrado = CobrosBLL.Buscar(CobroId);

            if (encontrado != null)
                this.Cobro = encontrado;
            else
                toastService.ShowWarning("No encontrado");
        }
    }

    private void Limpiar()
    {
        CobroId = 0;
        Cobro = new Cobros();
        ListaClientes = ClientesBLL.GetList(c => true);
    }

    public void Guardar()
    {
        bool guardo = true;

        guardo = CobrosBLL.Guardar(Cobro);

        if (guardo)
        {
            Limpiar();
            toastService.ShowSuccess("Guardado correctamente");
        }
        else
            toastService.ShowError("No fue posible guardar");
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = CobrosBLL.Eliminar(Cobro.CobroId);

        if (elimino)
        {
            Limpiar();
            toastService.ShowSuccess("Eliminado correctamente");
        }
        else
            toastService.ShowError("No fue posible eliminar");
    }

    private void BuscarVentas(int ClienteId)
    {
        ListaVentas = VentasBLL.GetList(v => v.ClienteId == ClienteId);
        Cobro.Detalle.Clear();
        foreach (var venta in ListaVentas)
        {
            Cobro.Detalle.Add(new CobrosDetalle{
                VentaId = venta.VentaId,
                Balance = venta.Balance,
                Fecha = venta.Fecha,
                Monto = venta.Monto
            }
            );
        }
    }

    private void Pago(bool pago, int id)
    {
        Detalle = Cobro.Detalle.ToList();
        Cobro.Detalle.Clear();

        foreach (var venta in Detalle)
        {
            if (venta.VentaId == id) {
                Cobro.Detalle.Add(new CobrosDetalle
                {
                    VentaId = venta.Id,
                    Balance = venta.Balance,
                    Fecha = venta.Fecha,
                    Monto = venta.Monto,
                    Cobrado = venta.Balance,
                    Pagado = pago
                }
                );
            }
            else
            {
                Cobro.Detalle.Add(new CobrosDetalle
                {
                    VentaId = venta.Id,
                    Balance = venta.Balance,
                    Fecha = venta.Fecha,
                    Monto = venta.Monto,
                    Pagado = pago
                }
            );
            }

        }
    }

}
